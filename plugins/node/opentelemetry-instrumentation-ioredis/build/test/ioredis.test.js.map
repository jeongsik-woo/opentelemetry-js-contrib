{"version":3,"file":"ioredis.test.js","sourceRoot":"","sources":["../../test/ioredis.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SpanStatusCode,\n  context,\n  SpanKind,\n  SpanStatus,\n  trace,\n  Span,\n} from '@opentelemetry/api';\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\nimport * as testUtils from '@opentelemetry/contrib-test-utils';\nimport {\n  InMemorySpanExporter,\n  ReadableSpan,\n  SimpleSpanProcessor,\n} from '@opentelemetry/sdk-trace-base';\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport * as ioredisTypes from 'ioredis';\nimport { IORedisInstrumentation } from '../src';\nimport {\n  IORedisInstrumentationConfig,\n  DbStatementSerializer,\n  IORedisRequestHookInformation,\n} from '../src/types';\nimport {\n  DBSYSTEMVALUES_REDIS,\n  SEMATTRS_DB_CONNECTION_STRING,\n  SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM,\n  SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_STACKTRACE,\n  SEMATTRS_EXCEPTION_TYPE,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT,\n} from '@opentelemetry/semantic-conventions';\n\nconst memoryExporter = new InMemorySpanExporter();\n\nconst CONFIG = {\n  host: process.env.OPENTELEMETRY_REDIS_HOST || 'localhost',\n  port: parseInt(process.env.OPENTELEMETRY_REDIS_PORT || '63790', 10),\n};\n\nconst REDIS_URL = `redis://${CONFIG.host}:${CONFIG.port}`;\n\nconst DEFAULT_ATTRIBUTES = {\n  [SEMATTRS_DB_SYSTEM]: DBSYSTEMVALUES_REDIS,\n  [SEMATTRS_NET_PEER_NAME]: CONFIG.host,\n  [SEMATTRS_NET_PEER_PORT]: CONFIG.port,\n  [SEMATTRS_DB_CONNECTION_STRING]: REDIS_URL,\n};\n\nconst unsetStatus: SpanStatus = {\n  code: SpanStatusCode.UNSET,\n};\n\nconst predictableStackTrace =\n  '-- Stack trace replaced by test to predictable value -- ';\nconst sanitizeEventForAssertion = (span: ReadableSpan) => {\n  span.events.forEach(e => {\n    // stack trace includes data such as /user/{userName}/repos/{projectName}\n    if (e.attributes?.[SEMATTRS_EXCEPTION_STACKTRACE]) {\n      e.attributes[SEMATTRS_EXCEPTION_STACKTRACE] = predictableStackTrace;\n    }\n\n    // since time will change on each test invocation, it is being replaced to predicable value\n    e.time = [0, 0];\n  });\n};\n\ndescribe('ioredis', () => {\n  const provider = new NodeTracerProvider({\n    spanProcessors: [new SimpleSpanProcessor(memoryExporter)],\n  });\n  let ioredis: typeof ioredisTypes.default;\n  let instrumentation: IORedisInstrumentation;\n  const shouldTestLocal = process.env.RUN_REDIS_TESTS_LOCAL;\n  const shouldTest = process.env.RUN_REDIS_TESTS || shouldTestLocal;\n\n  let contextManager: AsyncLocalStorageContextManager;\n  beforeEach(() => {\n    contextManager = new AsyncLocalStorageContextManager().enable();\n    context.setGlobalContextManager(contextManager);\n  });\n\n  afterEach(() => {\n    context.disable();\n  });\n\n  before(function () {\n    // needs to be \"function\" to have MochaContext \"this\" context\n    if (!shouldTest) {\n      // this.skip() workaround\n      // https://github.com/mochajs/mocha/issues/2683#issuecomment-375629901\n      this.test!.parent!.pending = true;\n      this.skip();\n    }\n\n    if (shouldTestLocal) {\n      testUtils.startDocker('redis');\n    }\n\n    instrumentation = new IORedisInstrumentation();\n    instrumentation.setTracerProvider(provider);\n    ioredis = require('ioredis');\n  });\n\n  after(() => {\n    if (shouldTestLocal) {\n      testUtils.cleanUpDocker('redis');\n    }\n  });\n\n  it('should have correct module name', () => {\n    assert.strictEqual(\n      instrumentation.instrumentationName,\n      '@opentelemetry/instrumentation-ioredis'\n    );\n  });\n\n  describe('#createClient()', () => {\n    it('should propagate the current span to event handlers', done => {\n      const span = provider.getTracer('ioredis-test').startSpan('test span');\n      let client: ioredisTypes.Redis;\n      const attributes = {\n        ...DEFAULT_ATTRIBUTES,\n        [SEMATTRS_DB_STATEMENT]: 'connect',\n      };\n      const readyHandler = () => {\n        const endedSpans = memoryExporter.getFinishedSpans();\n\n        assert.strictEqual(trace.getSpan(context.active()), span);\n        assert.strictEqual(endedSpans.length, 2);\n        assert.strictEqual(endedSpans[0].name, 'connect');\n        assert.strictEqual(endedSpans[1].name, 'info');\n        testUtils.assertPropagation(endedSpans[0], span);\n\n        testUtils.assertSpan(\n          endedSpans[0],\n          SpanKind.CLIENT,\n          attributes,\n          [],\n          unsetStatus\n        );\n        span.end();\n        assert.strictEqual(endedSpans.length, 3);\n        assert.strictEqual(endedSpans[2].name, 'test span');\n\n        client.quit(() => {\n          assert.strictEqual(endedSpans.length, 4);\n          assert.strictEqual(endedSpans[3].name, 'quit');\n          done();\n        });\n      };\n      const errorHandler = (err: Error) => {\n        assert.ifError(err);\n        client.quit(done);\n      };\n\n      context.with(trace.setSpan(context.active(), span), () => {\n        client = new ioredis(REDIS_URL);\n        client.on('ready', readyHandler);\n        client.on('error', errorHandler);\n      });\n    });\n  });\n\n  describe('#send_internal_message()', () => {\n    // use a random part in key names because redis instance is used for parallel running tests\n    const randomId = ((Math.random() * 2 ** 32) >>> 0).toString(16);\n    const testKeyName = `test-${randomId}`;\n    const hashKeyName = `hash-${randomId}`;\n\n    let client: ioredisTypes.Redis;\n\n    const IOREDIS_CALLBACK_OPERATIONS: Array<{\n      description: string;\n      name: string;\n      args: Array<string>;\n      expectedDbStatement: string;\n      method: (cb: ioredisTypes.Callback<unknown>) => unknown;\n    }> = [\n      {\n        description: 'insert',\n        name: 'hset',\n        args: [hashKeyName, 'testField', 'testValue'],\n        expectedDbStatement: `${hashKeyName} testField [1 other arguments]`,\n        method: (cb: ioredisTypes.Callback<number>) =>\n          client.hset(hashKeyName, 'testField', 'testValue', cb),\n      },\n      {\n        description: 'get',\n        name: 'get',\n        args: [testKeyName],\n        expectedDbStatement: `${testKeyName}`,\n        method: (cb: ioredisTypes.Callback<string | null>) =>\n          client.get(testKeyName, cb),\n      },\n    ];\n\n    before(done => {\n      client = new ioredis(REDIS_URL);\n      client.on('error', err => {\n        done(err);\n      });\n      client.on('ready', done);\n    });\n\n    beforeEach(async () => {\n      await client.set(testKeyName, 'data');\n      memoryExporter.reset();\n    });\n\n    after(done => {\n      client.quit(done);\n    });\n\n    afterEach(async () => {\n      await client.del(hashKeyName);\n      await client.del(testKeyName);\n      await client.del('response-hook-test');\n      memoryExporter.reset();\n    });\n\n    describe('Instrumenting query operations', () => {\n      before(() => {\n        instrumentation.disable();\n        instrumentation = new IORedisInstrumentation();\n        instrumentation.setTracerProvider(provider);\n        require('ioredis');\n      });\n\n      IOREDIS_CALLBACK_OPERATIONS.forEach(command => {\n        it(`should create a child span for cb style ${command.description}`, done => {\n          const attributes = {\n            ...DEFAULT_ATTRIBUTES,\n            [SEMATTRS_DB_STATEMENT]: `${command.name} ${command.expectedDbStatement}`,\n          };\n          const span = provider\n            .getTracer('ioredis-test')\n            .startSpan('test span');\n          context.with(trace.setSpan(context.active(), span), () => {\n            command.method((err, _result) => {\n              assert.ifError(err);\n              assert.strictEqual(memoryExporter.getFinishedSpans().length, 1);\n              span.end();\n              const endedSpans = memoryExporter.getFinishedSpans();\n              assert.strictEqual(endedSpans.length, 2);\n              assert.strictEqual(endedSpans[0].name, command.name);\n              testUtils.assertSpan(\n                endedSpans[0],\n                SpanKind.CLIENT,\n                attributes,\n                [],\n                unsetStatus\n              );\n              testUtils.assertPropagation(endedSpans[0], span);\n              done();\n            });\n          });\n        });\n      });\n\n      it('should create a child span for hset promise', async () => {\n        const attributes = {\n          ...DEFAULT_ATTRIBUTES,\n          [SEMATTRS_DB_STATEMENT]: `hset ${hashKeyName} random [1 other arguments]`,\n        };\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        await context.with(trace.setSpan(context.active(), span), async () => {\n          try {\n            await client.hset(hashKeyName, 'random', 'random');\n            assert.strictEqual(memoryExporter.getFinishedSpans().length, 1);\n            span.end();\n            const endedSpans = memoryExporter.getFinishedSpans();\n            assert.strictEqual(endedSpans.length, 2);\n            assert.strictEqual(endedSpans[0].name, 'hset');\n            testUtils.assertSpan(\n              endedSpans[0],\n              SpanKind.CLIENT,\n              attributes,\n              [],\n              unsetStatus\n            );\n            testUtils.assertPropagation(endedSpans[0], span);\n          } catch (error) {\n            assert.ifError(error);\n          }\n        });\n      });\n\n      it('should set span with error when redis return reject', async () => {\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        await context.with(trace.setSpan(context.active(), span), async () => {\n          await client.set('non-int-key', 'non-int-value');\n          try {\n            // should throw 'ReplyError: ERR value is not an integer or out of range'\n            // because the value im the key is not numeric and we try to increment it\n            await client.incr('non-int-key');\n          } catch (ex: any) {\n            const endedSpans = memoryExporter.getFinishedSpans();\n            assert.strictEqual(endedSpans.length, 2);\n            const ioredisSpan = endedSpans[1];\n            // redis 'incr' operation failed with exception, so span should indicate it\n            assert.strictEqual(ioredisSpan.status.code, SpanStatusCode.ERROR);\n            const exceptionEvent = ioredisSpan.events[0];\n            assert.strictEqual(exceptionEvent.name, 'exception');\n            assert.strictEqual(\n              exceptionEvent.attributes?.[SEMATTRS_EXCEPTION_MESSAGE],\n              ex.message\n            );\n            assert.strictEqual(\n              exceptionEvent.attributes?.[SEMATTRS_EXCEPTION_STACKTRACE],\n              ex.stack\n            );\n            assert.strictEqual(\n              exceptionEvent.attributes?.[SEMATTRS_EXCEPTION_TYPE],\n              ex.name\n            );\n          }\n        });\n      });\n\n      it('should create a child span for streamify scanning', done => {\n        const attributes = {\n          ...DEFAULT_ATTRIBUTES,\n          [SEMATTRS_DB_STATEMENT]: 'scan 0 MATCH test-* COUNT 1000',\n        };\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        context.with(trace.setSpan(context.active(), span), () => {\n          const stream = client.scanStream({\n            count: 1000,\n            match: 'test-*',\n          });\n          stream\n            .on('end', () => {\n              assert.strictEqual(memoryExporter.getFinishedSpans().length, 1);\n              span.end();\n              const endedSpans = memoryExporter.getFinishedSpans();\n              assert.strictEqual(endedSpans.length, 2);\n              assert.strictEqual(endedSpans[0].name, 'scan');\n              testUtils.assertSpan(\n                endedSpans[0],\n                SpanKind.CLIENT,\n                attributes,\n                [],\n                unsetStatus\n              );\n              testUtils.assertPropagation(endedSpans[0], span);\n              done();\n            })\n            .on('error', err => {\n              done(err);\n            });\n\n          // Put stream into flowing mode so it will invoke 'end' listener\n          stream.resume();\n        });\n      });\n\n      it.skip('should create a child span for pubsub', async () => {\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        await context.with(trace.setSpan(context.active(), span), async () => {\n          try {\n            // use lazyConnect so we can call the `connect` function and await it.\n            // this ensures that all operations are sequential and predictable.\n            const pub = new ioredis(REDIS_URL, { lazyConnect: true });\n            await pub.connect();\n            const sub = new ioredis(REDIS_URL, { lazyConnect: true });\n            await sub.connect();\n            await sub.subscribe('news', 'music');\n            await pub.publish('news', 'Hello world!');\n            await pub.publish('music', 'Hello again!');\n            await sub.unsubscribe('news', 'music');\n            await sub.quit();\n            await pub.quit();\n            const endedSpans = memoryExporter.getFinishedSpans();\n            assert.strictEqual(endedSpans.length, 10);\n            span.end();\n            assert.strictEqual(endedSpans.length, 11);\n            const expectedSpanNames = [\n              'connect',\n              'info',\n              'connect',\n              'info',\n              'subscribe',\n              'publish',\n              'publish',\n              'unsubscribe',\n              'quit',\n              'quit',\n              'test span',\n            ];\n\n            const actualSpanNames = endedSpans.map(s => s.name);\n            assert.deepStrictEqual(\n              actualSpanNames.sort(),\n              expectedSpanNames.sort()\n            );\n\n            const attributes = {\n              ...DEFAULT_ATTRIBUTES,\n              [SEMATTRS_DB_STATEMENT]: 'subscribe news music',\n            };\n            testUtils.assertSpan(\n              endedSpans[4],\n              SpanKind.CLIENT,\n              attributes,\n              [],\n              unsetStatus\n            );\n            testUtils.assertPropagation(endedSpans[0], span);\n          } catch (error) {\n            assert.ifError(error);\n          }\n        });\n      });\n\n      it('should create a child span for multi/transaction', done => {\n        const attributes = {\n          ...DEFAULT_ATTRIBUTES,\n          [SEMATTRS_DB_STATEMENT]: 'multi',\n        };\n\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        context.with(trace.setSpan(context.active(), span), () => {\n          client\n            .multi()\n            .set('foo', 'bar')\n            .get('foo')\n            .exec((err, _results) => {\n              assert.ifError(err);\n\n              assert.strictEqual(memoryExporter.getFinishedSpans().length, 4);\n              span.end();\n              const endedSpans = memoryExporter.getFinishedSpans();\n              assert.strictEqual(endedSpans.length, 5);\n              assert.strictEqual(endedSpans[0].name, 'multi');\n              assert.strictEqual(endedSpans[1].name, 'set');\n              assert.strictEqual(endedSpans[2].name, 'get');\n              assert.strictEqual(endedSpans[3].name, 'exec');\n              testUtils.assertSpan(\n                endedSpans[0],\n                SpanKind.CLIENT,\n                attributes,\n                [],\n                unsetStatus\n              );\n              testUtils.assertPropagation(endedSpans[0], span);\n              done();\n            });\n        });\n      });\n\n      it('should create a child span for pipeline', done => {\n        const attributes = {\n          ...DEFAULT_ATTRIBUTES,\n          [SEMATTRS_DB_STATEMENT]: 'set foo [1 other arguments]',\n        };\n\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        context.with(trace.setSpan(context.active(), span), () => {\n          const pipeline = client.pipeline();\n          pipeline.set('foo', 'bar');\n          pipeline.del('cc');\n          pipeline.exec((err, results) => {\n            assert.ifError(err);\n\n            assert.strictEqual(memoryExporter.getFinishedSpans().length, 2);\n            span.end();\n            const endedSpans = memoryExporter.getFinishedSpans();\n            assert.strictEqual(endedSpans.length, 3);\n            assert.strictEqual(endedSpans[0].name, 'set');\n            assert.strictEqual(endedSpans[1].name, 'del');\n            assert.strictEqual(endedSpans[2].name, 'test span');\n            testUtils.assertSpan(\n              endedSpans[0],\n              SpanKind.CLIENT,\n              attributes,\n              [],\n              unsetStatus\n            );\n            testUtils.assertPropagation(endedSpans[0], span);\n            done();\n          });\n        });\n      });\n\n      it('should create a child span for get promise', async () => {\n        const attributes = {\n          ...DEFAULT_ATTRIBUTES,\n          [SEMATTRS_DB_STATEMENT]: `get ${testKeyName}`,\n        };\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        await context.with(trace.setSpan(context.active(), span), async () => {\n          try {\n            const value = await client.get(testKeyName);\n            assert.strictEqual(value, 'data');\n            assert.strictEqual(memoryExporter.getFinishedSpans().length, 1);\n            span.end();\n            const endedSpans = memoryExporter.getFinishedSpans();\n            assert.strictEqual(endedSpans.length, 2);\n            assert.strictEqual(endedSpans[0].name, 'get');\n            testUtils.assertSpan(\n              endedSpans[0],\n              SpanKind.CLIENT,\n              attributes,\n              [],\n              unsetStatus\n            );\n            testUtils.assertPropagation(endedSpans[0], span);\n          } catch (error) {\n            assert.ifError(error);\n          }\n        });\n      });\n\n      it('should create a child span for del', async () => {\n        const attributes = {\n          ...DEFAULT_ATTRIBUTES,\n          [SEMATTRS_DB_STATEMENT]: `del ${testKeyName}`,\n        };\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        await context.with(trace.setSpan(context.active(), span), async () => {\n          try {\n            const result = await client.del(testKeyName);\n            assert.strictEqual(result, 1);\n            assert.strictEqual(memoryExporter.getFinishedSpans().length, 1);\n            span.end();\n            const endedSpans = memoryExporter.getFinishedSpans();\n            assert.strictEqual(endedSpans.length, 2);\n            assert.strictEqual(endedSpans[0].name, 'del');\n            testUtils.assertSpan(\n              endedSpans[0],\n              SpanKind.CLIENT,\n              attributes,\n              [],\n              unsetStatus\n            );\n            testUtils.assertPropagation(endedSpans[0], span);\n          } catch (error) {\n            assert.ifError(error);\n          }\n        });\n      });\n\n      it('should create a child span for lua', done => {\n        const config: IORedisInstrumentationConfig = {\n          requireParentSpan: false,\n        };\n        instrumentation.setConfig(config);\n\n        const attributes = {\n          ...DEFAULT_ATTRIBUTES,\n          [SEMATTRS_DB_STATEMENT]: `evalsha bfbf458525d6a0b19200bfd6db3af481156b367b 1 ${testKeyName}`,\n        };\n\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        context.with(trace.setSpan(context.active(), span), () => {\n          // This will define a command echo:\n          client.defineCommand('echo', {\n            numberOfKeys: 1,\n            lua: 'return {KEYS[1],ARGV[1]}',\n          });\n          // Now `echo` can be used just like any other ordinary command,\n          // and ioredis will try to use `EVALSHA` internally when possible for better performance.\n          client.echo(testKeyName, (err, result) => {\n            assert.ifError(err);\n\n            span.end();\n            const endedSpans = memoryExporter.getFinishedSpans();\n            const evalshaSpan = endedSpans[0];\n            // the script may be already cached on server therefore we get either 2 or 3 spans\n            if (endedSpans.length === 3) {\n              assert.strictEqual(endedSpans[2].name, 'test span');\n              assert.strictEqual(endedSpans[1].name, 'eval');\n              assert.strictEqual(endedSpans[0].name, 'evalsha');\n              // in this case, server returns NOSCRIPT error for evalsha,\n              // telling the client to use EVAL instead\n              sanitizeEventForAssertion(evalshaSpan);\n              testUtils.assertSpan(\n                evalshaSpan,\n                SpanKind.CLIENT,\n                attributes,\n                [\n                  {\n                    attributes: {\n                      [SEMATTRS_EXCEPTION_MESSAGE]:\n                        'NOSCRIPT No matching script. Please use EVAL.',\n                      [SEMATTRS_EXCEPTION_STACKTRACE]: predictableStackTrace,\n                      [SEMATTRS_EXCEPTION_TYPE]: 'ReplyError',\n                    },\n                    name: 'exception',\n                    time: [0, 0],\n                    droppedAttributesCount: 0,\n                  },\n                ],\n                {\n                  code: SpanStatusCode.ERROR,\n                }\n              );\n            } else {\n              assert.strictEqual(endedSpans.length, 2);\n              assert.strictEqual(endedSpans[1].name, 'test span');\n              assert.strictEqual(endedSpans[0].name, 'evalsha');\n              testUtils.assertSpan(\n                evalshaSpan,\n                SpanKind.CLIENT,\n                attributes,\n                [],\n                unsetStatus\n              );\n            }\n            testUtils.assertPropagation(evalshaSpan, span);\n            done();\n          });\n        });\n      });\n    });\n\n    describe('Instrumenting without parent span', () => {\n      before(() => {\n        const config: IORedisInstrumentationConfig = {\n          requireParentSpan: true,\n        };\n        instrumentation.setConfig(config);\n      });\n      it('should not create child span for query', async () => {\n        await client.set(testKeyName, 'data');\n        const result = await client.del(testKeyName);\n        assert.strictEqual(result, 1);\n        assert.strictEqual(memoryExporter.getFinishedSpans().length, 0);\n      });\n\n      it('should not create child span for connect', async () => {\n        const lazyClient = new ioredis(REDIS_URL, { lazyConnect: true });\n        await lazyClient.connect();\n        const spans = memoryExporter.getFinishedSpans();\n        await lazyClient.quit();\n        assert.strictEqual(spans.length, 0);\n      });\n    });\n\n    describe('Instrumentation with requireParentSpan', () => {\n      it('should instrument queries with requireParentSpan equal false', async () => {\n        const config: IORedisInstrumentationConfig = {\n          requireParentSpan: false,\n        };\n        instrumentation.setConfig(config);\n\n        await client.set(testKeyName, 'data');\n        const result = await client.del(testKeyName);\n        assert.strictEqual(result, 1);\n        const endedSpans = memoryExporter.getFinishedSpans();\n\n        assert.strictEqual(endedSpans.length, 2);\n        testUtils.assertSpan(\n          endedSpans[0],\n          SpanKind.CLIENT,\n          {\n            ...DEFAULT_ATTRIBUTES,\n            [SEMATTRS_DB_STATEMENT]: `set ${testKeyName} [1 other arguments]`,\n          },\n          [],\n          unsetStatus\n        );\n      });\n\n      it.skip('should instrument connect with requireParentSpan equal false', async () => {\n        const config: IORedisInstrumentationConfig = {\n          requireParentSpan: false,\n        };\n        instrumentation.setConfig(config);\n\n        const lazyClient = new ioredis(REDIS_URL, { lazyConnect: true });\n        await lazyClient.connect();\n        const endedSpans = memoryExporter.getFinishedSpans();\n        assert.strictEqual(endedSpans.length, 2);\n        assert.strictEqual(endedSpans[0].name, 'connect');\n        assert.strictEqual(endedSpans[1].name, 'info');\n\n        await lazyClient.quit();\n        testUtils.assertSpan(\n          endedSpans[0],\n          SpanKind.CLIENT,\n          {\n            ...DEFAULT_ATTRIBUTES,\n            [SEMATTRS_DB_STATEMENT]: 'connect',\n          },\n          [],\n          unsetStatus\n        );\n      });\n\n      it('should not instrument queries with requireParentSpan equal true', async () => {\n        const config: IORedisInstrumentationConfig = {\n          requireParentSpan: true,\n        };\n        instrumentation.setConfig(config);\n\n        await client.set(testKeyName, 'data');\n        const result = await client.del(testKeyName);\n        assert.strictEqual(result, 1);\n\n        assert.strictEqual(memoryExporter.getFinishedSpans().length, 0);\n      });\n\n      it('should not instrument connect with requireParentSpan equal true', async () => {\n        const config: IORedisInstrumentationConfig = {\n          requireParentSpan: true,\n        };\n        instrumentation.setConfig(config);\n\n        const lazyClient = new ioredis(REDIS_URL, { lazyConnect: true });\n        await lazyClient.connect();\n        const endedSpans = memoryExporter.getFinishedSpans();\n        assert.strictEqual(endedSpans.length, 0);\n\n        await lazyClient.quit();\n      });\n    });\n\n    describe('Instrumenting with a custom db.statement serializer', () => {\n      const dbStatementSerializer: DbStatementSerializer = (cmdName, cmdArgs) =>\n        `FOOBAR_${cmdName}: ${cmdArgs[0]}`;\n      before(() => {\n        const config: IORedisInstrumentationConfig = {\n          dbStatementSerializer,\n        };\n        instrumentation.setConfig(config);\n      });\n\n      IOREDIS_CALLBACK_OPERATIONS.forEach(command => {\n        it(`should tag the span with a custom db.statement for cb style ${command.description}`, done => {\n          const attributes = {\n            ...DEFAULT_ATTRIBUTES,\n            [SEMATTRS_DB_STATEMENT]: dbStatementSerializer(\n              command.name,\n              command.args\n            ),\n          };\n          const span = provider\n            .getTracer('ioredis-test')\n            .startSpan('test span');\n          context.with(trace.setSpan(context.active(), span), () => {\n            command.method((err, _result) => {\n              assert.ifError(err);\n              assert.strictEqual(memoryExporter.getFinishedSpans().length, 1);\n              span.end();\n              const endedSpans = memoryExporter.getFinishedSpans();\n              assert.strictEqual(endedSpans.length, 2);\n              assert.strictEqual(endedSpans[0].name, command.name);\n              testUtils.assertSpan(\n                endedSpans[0],\n                SpanKind.CLIENT,\n                attributes,\n                [],\n                unsetStatus\n              );\n              testUtils.assertPropagation(endedSpans[0], span);\n              done();\n            });\n          });\n        });\n      });\n    });\n\n    describe('Removing instrumentation', () => {\n      before(() => {\n        instrumentation.disable();\n      });\n\n      IOREDIS_CALLBACK_OPERATIONS.forEach(operation => {\n        it(`should not create a child span for cb style ${operation.description}`, done => {\n          const span = provider\n            .getTracer('ioredis-test')\n            .startSpan('test span');\n          context.with(trace.setSpan(context.active(), span), () => {\n            operation.method((err, _) => {\n              assert.ifError(err);\n              assert.strictEqual(memoryExporter.getFinishedSpans().length, 0);\n              span.end();\n              const endedSpans = memoryExporter.getFinishedSpans();\n              assert.strictEqual(endedSpans.length, 1);\n              assert.strictEqual(endedSpans[0], span);\n              done();\n            });\n          });\n        });\n      });\n\n      it('should not create a child span for hset promise upon error', async () => {\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        await context.with(trace.setSpan(context.active(), span), async () => {\n          try {\n            await client.hset(hashKeyName, 'random', 'random');\n            assert.strictEqual(memoryExporter.getFinishedSpans().length, 0);\n            span.end();\n            const endedSpans = memoryExporter.getFinishedSpans();\n            assert.strictEqual(endedSpans.length, 1);\n            assert.strictEqual(endedSpans[0].name, 'test span');\n          } catch (error) {\n            assert.ifError(error);\n          }\n        });\n      });\n    });\n\n    describe('Instrumenting with a custom hooks', () => {\n      before(() => {\n        instrumentation.disable();\n        instrumentation = new IORedisInstrumentation();\n        instrumentation.setTracerProvider(provider);\n        require('ioredis');\n      });\n\n      it('should call requestHook when set in config', async () => {\n        const requestHook = sinon.spy(\n          (span: Span, requestInfo: IORedisRequestHookInformation) => {\n            span.setAttribute(\n              'attribute key from request hook',\n              'custom value from request hook'\n            );\n          }\n        );\n        instrumentation.setConfig(<IORedisInstrumentationConfig>{\n          requestHook,\n        });\n\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        await context.with(trace.setSpan(context.active(), span), async () => {\n          await client.incr('request-hook-test');\n          const endedSpans = memoryExporter.getFinishedSpans();\n          assert.strictEqual(endedSpans.length, 1);\n          assert.strictEqual(\n            endedSpans[0].attributes['attribute key from request hook'],\n            'custom value from request hook'\n          );\n        });\n\n        sinon.assert.calledOnce(requestHook);\n        const [, requestInfo] = requestHook.firstCall.args;\n        assert.ok(\n          /\\d{1,4}\\.\\d{1,4}\\.\\d{1,5}.*/.test(\n            requestInfo.moduleVersion as string\n          )\n        );\n        assert.strictEqual(requestInfo.cmdName, 'incr');\n        assert.deepStrictEqual(requestInfo.cmdArgs, ['request-hook-test']);\n      });\n\n      it('should ignore requestHook which throws exception', async () => {\n        const requestHook = sinon.spy(\n          (span: Span, _requestInfo: IORedisRequestHookInformation) => {\n            span.setAttribute(\n              'attribute key BEFORE exception',\n              'this attribute is added to span BEFORE exception is thrown thus we can expect it'\n            );\n            throw Error('error thrown in requestHook');\n          }\n        );\n        instrumentation.setConfig(<IORedisInstrumentationConfig>{\n          requestHook,\n        });\n\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        await context.with(trace.setSpan(context.active(), span), async () => {\n          await client.incr('request-hook-throw-test');\n          const endedSpans = memoryExporter.getFinishedSpans();\n          assert.strictEqual(endedSpans.length, 1);\n          assert.strictEqual(\n            endedSpans[0].attributes['attribute key BEFORE exception'],\n            'this attribute is added to span BEFORE exception is thrown thus we can expect it'\n          );\n        });\n\n        sinon.assert.threw(requestHook);\n      });\n\n      it('should call responseHook when set in config', async () => {\n        const responseHook = sinon.spy(\n          (\n            span: Span,\n            cmdName: string,\n            _cmdArgs: Array<string | Buffer | number>,\n            response: unknown\n          ) => {\n            span.setAttribute(\n              'attribute key from hook',\n              'custom value from hook'\n            );\n          }\n        );\n        instrumentation.setConfig(<IORedisInstrumentationConfig>{\n          responseHook,\n        });\n\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        await context.with(trace.setSpan(context.active(), span), async () => {\n          await client.set('response-hook-test', 'test-value');\n          const endedSpans = memoryExporter.getFinishedSpans();\n          assert.strictEqual(endedSpans.length, 1);\n          assert.strictEqual(\n            endedSpans[0].attributes['attribute key from hook'],\n            'custom value from hook'\n          );\n        });\n\n        sinon.assert.calledOnce(responseHook);\n        const [, cmdName, , response] = responseHook.firstCall.args as [\n          Span,\n          string,\n          unknown,\n          Buffer\n        ];\n        assert.strictEqual(cmdName, 'set');\n        assert.strictEqual(response.toString(), 'OK');\n      });\n\n      it('should ignore responseHook which throws exception', async () => {\n        const responseHook = sinon.spy(\n          (\n            _span: Span,\n            _cmdName: string,\n            _cmdArgs: Array<string | Buffer | number>,\n            _response: unknown\n          ) => {\n            throw Error('error thrown in responseHook');\n          }\n        );\n        instrumentation.setConfig(<IORedisInstrumentationConfig>{\n          responseHook,\n        });\n\n        const span = provider.getTracer('ioredis-test').startSpan('test span');\n        await context.with(trace.setSpan(context.active(), span), async () => {\n          await client.incr('response-hook-throw-test');\n          const endedSpans = memoryExporter.getFinishedSpans();\n\n          // hook throw exception, but span should not be affected\n          assert.strictEqual(endedSpans.length, 1);\n        });\n\n        sinon.assert.threw(responseHook);\n      });\n    });\n\n    describe('setConfig - custom dbStatementSerializer config', () => {\n      const dbStatementSerializer = (\n        cmdName: string,\n        cmdArgs: Array<string | Buffer | number | any>\n      ) => {\n        return Array.isArray(cmdArgs) && cmdArgs.length\n          ? `FooBar_${cmdName} ${cmdArgs.join(',')}`\n          : cmdName;\n      };\n      const config: IORedisInstrumentationConfig = {\n        dbStatementSerializer: dbStatementSerializer,\n      };\n      before(() => {\n        instrumentation.setConfig(config);\n      });\n\n      IOREDIS_CALLBACK_OPERATIONS.forEach(operation => {\n        it(`should properly execute the db statement serializer for operation ${operation.description}`, done => {\n          const span = provider\n            .getTracer('ioredis-test')\n            .startSpan('test span');\n          context.with(trace.setSpan(context.active(), span), () => {\n            operation.method((err, _) => {\n              assert.ifError(err);\n              span.end();\n              const endedSpans = memoryExporter.getFinishedSpans();\n              assert.strictEqual(endedSpans.length, 2);\n              const expectedStatement = dbStatementSerializer(\n                operation.name,\n                operation.args\n              );\n              assert.strictEqual(\n                endedSpans[0].attributes[SEMATTRS_DB_STATEMENT],\n                expectedStatement\n              );\n              done();\n            });\n          });\n        });\n      });\n    });\n  });\n\n  it('should work with ESM usage', async () => {\n    await testUtils.runTestFixture({\n      cwd: __dirname,\n      argv: ['fixtures/use-ioredis.mjs', REDIS_URL],\n      env: {\n        NODE_OPTIONS:\n          '--experimental-loader=@opentelemetry/instrumentation/hook.mjs',\n        NODE_NO_WARNINGS: '1',\n      },\n      checkResult: (err, stdout, stderr) => {\n        assert.ifError(err);\n      },\n      checkCollector: (collector: testUtils.TestCollector) => {\n        const spans = collector.sortedSpans;\n        assert.strictEqual(spans[0].name, 'manual');\n        assert.strictEqual(spans[1].name, 'set');\n        assert.strictEqual(spans[1].parentSpanId, spans[0].spanId);\n        assert.strictEqual(spans[2].name, 'get');\n        assert.strictEqual(spans[2].parentSpanId, spans[0].spanId);\n      },\n    });\n  });\n});\n"]}